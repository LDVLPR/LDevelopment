@using LDevelopment.ViewModels
@model PostViewModel

@{
    ViewBag.Title = Model.Title;
}

<div class="post">
    <div class="container body-content">
        <div class="col-md-offset-1 col-md-10">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img class="img-responsive" src="@Url.Content(Model.ImageUrl)" alt="@Url.Content(Model.Title)" />
            }
            <div class="tags">
                @foreach (SelectListItem tag in Model.Tags.Items)
                {
                    @Html.ActionLink(tag.Text, "Tag", new { tag = tag.Value }, new { @class = "tag-small" })
                }
            </div>
            <h1 class="text-uppercase">@Html.DisplayFor(model => model.Title)</h1>
            <div class="entity-header">
                <span class="glyphicon glyphicon-time"></span>
                <span class="release-date">@Html.DisplayFor(model => model.ReleaseDate)</span>
                <span class="glyphicon glyphicon-comment"></span>
                <span class="comments-info">@Resources.Comments: @Html.DisplayFor(model => model.Comments.Count)</span>
            </div>
            <div>
                @Html.Raw(HttpUtility.HtmlDecode(Html.DisplayFor(model => model.Text).ToString()))
            </div>

            <hr />
            
            @if (Model.Comments.Any())
            {
                <h2 class="text-uppercase">@Resources.Comments</h2>
                <div class="comments">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="comment">
                            <a href="mailto:@Html.DisplayFor(model => comment.AuthorMail)">@Html.DisplayFor(model => comment.AuthorName)</a><br/>
                            <span class="date">@Html.DisplayFor(model => comment.ReleaseDate)</span>
                            <p>@Html.DisplayFor(model => comment.Text)</p>
                        </div>
                    }
                </div>
                <hr />
            }

            @if (Request.IsAuthenticated)
            {
                <div>
                    @Ajax.ActionLink(Resources.CommentAdd, "Comment", new { id = Model.Id },
                        new AjaxOptions { UpdateTargetId = "new-comment", OnBegin = "hideButton()" },
                        new { @class = "link btn text-uppercase new-comment-button" })

                    <div id="new-comment"></div>
                </div>
            }
            else
            {
                <h3 class="text-uppercase">@Resources.LogInToAddComment</h3>
                <div class="login text-center">
                    <div class="col-md-5">
                        @Html.Partial("~/Views/Account/_LocalLoginPartial.cshtml", new LoginViewModel())
                    </div>
                    <div class="col-md-2">
                        <h3 class="text-lowercase">@Resources.Or</h3>
                    </div>
                    <div class="col-md-5">
                        @Html.Partial("~/Views/Account/_ExternalLoginsListPartial.cshtml", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function hideButton() {
            $('.new-comment-button').hide();
        }
    </script>
}