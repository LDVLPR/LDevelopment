@using System.Text.RegularExpressions
@using PagedList.Mvc
@model LDevelopment.ViewModels.BlogViewModel

@{
    ViewBag.Title = Resources.Blog;
}

<div class="blog parallax-bg">
    <div class="container body-content">
        <h1 class="text-uppercase text-center">@Resources.Blog</h1>

        @using (Html.BeginForm())
        {
            <div class="search col-md-offset-2 col-md-8">
                @Html.TextBox("SearchString", Model.Search.SearchString, new { @class = "form-control", @placeholder = Resources.SearchPlaceholder })
                <input type="submit" class="link btn btn-lg text-uppercase" value="@Resources.Search" />
            </div>
        }
    </div>
</div>

<div class="posts">
    <div class="container body-content">
        <div class="col-md-8">
            @if (Model.Posts.Any())
            {
                if (Model.Search.SearchResult && !string.IsNullOrEmpty(Model.Search.SearchString))
                {
                    <div id="search-result">
                        @Resources.Results <strong>@Model.Search.SearchString</strong>: @Model.Posts.Count()
                    </div>
                    <hr>
                }

                foreach (var item in Model.Posts)
                {
                    if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <a href="@Url.Action("Details", new { id = item.Id })">
                            <img class="img-responsive" src="@item.ImageUrl" alt="@item.Title" />
                        </a>
                    }
                    <div class="tags">
                        @foreach (SelectListItem tag in item.Tags.Items)
                        {
                            @Html.ActionLink(tag.Text, "Tag", new { tag = tag.Value }, new { @class = "tag-small" })
                        }
                    </div>
                    <div class="entity">
                        <h2 class="entity-title text-uppercase">
                            @Html.ActionLink(item.Title, "Details", new { id = item.Id })
                        </h2>
                        <div class="entity-header">
                            <span class="glyphicon glyphicon-time"></span>
                            <span class="release-date">@Html.DisplayFor(modelItem => item.ReleaseDate)</span>
                            <span class="glyphicon glyphicon-comment"></span>
                            <span class="comments-info">
                                @Html.ActionLink(Resources.Comments + ": " + item.Comments.Count, "Details",
                                    "Blog", null, null, "comments", new { id = item.Id }, null)
                            </span>
                        </div>
                        <div class="content">
                            @{
                                var text = HttpUtility.HtmlDecode(Html.DisplayFor(modelItem => item.Text).ToString());

                                if (Model.Search.SearchResult && !string.IsNullOrEmpty(Model.Search.SearchString))
                                {
                                    text = Regex.Replace(text, Model.Search.SearchString, "<strong>" + Model.Search.SearchString + "</strong>", RegexOptions.IgnoreCase);
                                }
                            }

                            @Html.Raw(text)

                            @if (item.HasReadMoreLink)
                            {
                                @Html.ActionLink(Resources.ReadMore, "Details", new { id = item.Id }, new  { @class = "link btn btn-lg text-uppercase" })
                            }
                        </div>
                    </div>
                    <hr>
                }

                @Html.PagedListPager(Model.Posts, pageNumber => Url.Action("Index", new { pageNumber }))
            }
            else
            {
                @Resources.NoResults <strong>@Model.Search.SearchString</strong>
            }
        </div>

        <div class="col-md-4 tags">
            <h3 class="text-uppercase">@Resources.Categories</h3>
            @foreach (var item in Model.Tags)
            {
                @Html.ActionLink(item.Title, "Tag", new { tag = item.Id }, new { @class = "tag" })
            }
        </div>
    </div>
</div>